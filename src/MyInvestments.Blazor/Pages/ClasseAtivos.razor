@page "/classeativos"
@using MyInvestments.ClasseAtivos
@using MyInvestments.ExcelExport
@using MyInvestments.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inherits MyInvestmentsComponentBase
@inject IClasseAtivoAppService ClasseAtivoAppService
@inject AbpBlazorMessageLocalizerHelper<MyInvestmentsResource> LH
@inject IExportToExcelAppService ExportToExcelAppService
@inject IJSRuntime JsRuntime
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["ClasseAtivos"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (CanCreateClasseAtivo)
                {
                    <Button Color="Color.Primary"
                            Clicked="OpenCreateClasseAtivoModal">
                        @L["NewClasseAtivo"]
                    </Button>
                }
            </Column>
        </Row>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <Validations @ref="validationsRef" Mode="ValidationMode.Manual">
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <TextEdit @bind-Text="@SearchClasseAtivo" Placeholder=@L["SearchClasseAtivo"] />
                        </Field>
                    </Validation>
                </Validations>
            </Column>
            <Column>
                <Button Color="Color.Primary" Clicked="@Search">@L["Search"]</Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ClasseAtivoDto"
                  Data="ClasseAtivoList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  Responsive="true">
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="ClasseAtivoDto"
                                Field="@nameof(ClasseAtivoDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditClasseAtivo)
                                {
                                    <DropdownItem Clicked="() => OpenEditClasseAtivoModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteClasseAtivo)
                                {
                                    <DropdownItem Clicked="() => DeleteClasseAtivoAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ClasseAtivoDto"
                                Field="@nameof(ClasseAtivoDto.Nome)"
                                Caption="@L["Name"]">
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
        <Row Class="d-flex px-0 mx-0 mb-1">
            <Button Clicked="@(ExportToExcel)" class="p-0 ml-auto mr-2" style="background-color: transparent"
                    title="Download">
                <span class="fa fa-file-excel fa-lg m-0" style="color: #008000; background-color: white;"
                      aria-hidden="true">
                </span>
                @L["Export"]
            </Button>
        </Row>
    </CardBody>
</Card>

<Modal @ref="CreateClasseAtivoModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewClasseAtivo"]</ModalTitle>
                <CloseButton Clicked="CloseCreateClasseAtivoModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewClasseAtivo" ValidateOnLoad="false">

                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewClasseAtivo.Nome">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateClasseAtivoModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateClasseAtivoAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="EditClasseAtivoModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingClasseAtivo.Nome</ModalTitle>
                <CloseButton Clicked="CloseEditClasseAtivoModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingClasseAtivo" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingClasseAtivo.Nome">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditClasseAtivoModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateClasseAtivoAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
